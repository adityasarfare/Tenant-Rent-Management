{"ast":null,"code":"import axios from 'axios';\n\n// Retrieve stored credentials (if they are stored in local storage)\nconst username = 'user';\nconst password = 'password';\nfunction getBasicAuthHeader(username, password) {\n  // Combine the username and password into a single string and encode it using Base64\n  const credentials = `${username}:${password}`;\n  const base64Credentials = btoa(credentials); // Encode to Base64\n  return `Basic ${base64Credentials}`;\n}\n;\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:8081/api',\n  // Replace with your back-end URL\n  headers: {\n    'Content-Type': 'application/json',\n    // Generate the Basic Authentication header using the utility function\n    'Authorization': getBasicAuthHeader(username, password)\n  }\n});\n\n// Function to get all tenants\nexport const getTenants = async () => {\n  try {\n    const response = await apiClient.get('/tenants');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tenants', error);\n    throw error;\n  }\n};\n\n// Function to create a new tenant\nexport const createTenant = async tenant => {\n  try {\n    const response = await apiClient.post('/tenants', tenant);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating tenant', error);\n    throw error;\n  }\n};\n\n// Function to update a tenant\nexport const updateTenant = async (id, tenant) => {\n  try {\n    const response = await apiClient.put(`/tenants/${id}`, tenant);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating tenant', error);\n    throw error;\n  }\n};\n\n// Function to get tenant by ID\nexport const getTenantById = async id => {\n  try {\n    const response = await apiClient.get(`/tenants/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tenant by ID', error);\n    throw error;\n  }\n};\n\n// Function to delete a tenant\nexport const deleteTenant = async id => {\n  try {\n    await apiClient.delete(`/tenants/${id}`);\n  } catch (error) {\n    console.error('Error deleting tenant', error);\n    throw error;\n  }\n};\n\n// Similarly, add functions for rent payments\nexport const getRentPayments = async () => {\n  try {\n    const response = await apiClient.get('/rentpayments');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching rent payments', error);\n    throw error;\n  }\n};\n\n// ... Other rent payment methods\n// Function to create a new rentpayments\nexport const createRentpayments = async rentpayments => {\n  try {\n    const response = await apiClient.post('/rentpayments', rentpayments);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating rent payments', error);\n    throw error;\n  }\n};\n\n// Function to update a rent payments\nexport const updateRentpayments = async (id, rentpayments) => {\n  try {\n    const response = await apiClient.put(`/rentpayments/${id}`, {\n      ...rentpayments,\n      id\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating rent payments', error);\n    throw error;\n  }\n};\n\n// Function to get rentpayments by ID\nexport const getRentpaymentsById = async id => {\n  try {\n    const response = await apiClient.get(`/rentpayments/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching rentpayments by ID', error);\n    throw error;\n  }\n};\n\n// Function to delete a rentpayments\nexport const deleteRentpayments = async id => {\n  try {\n    await apiClient.delete(`/rentpayments/${id}`);\n  } catch (error) {\n    console.error('Error deleting rentpayments', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","username","password","getBasicAuthHeader","credentials","base64Credentials","btoa","apiClient","create","baseURL","headers","getTenants","response","get","data","error","console","createTenant","tenant","post","updateTenant","id","put","getTenantById","deleteTenant","delete","getRentPayments","createRentpayments","rentpayments","updateRentpayments","getRentpaymentsById","deleteRentpayments"],"sources":["C:/Users/DELL/source/repos/nsalunke729/tenant-rent-app/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Retrieve stored credentials (if they are stored in local storage)\r\nconst username = 'user';\r\nconst password = 'password';\r\n\r\nfunction getBasicAuthHeader(username, password) {\r\n    // Combine the username and password into a single string and encode it using Base64\r\n    const credentials = `${username}:${password}`;\r\n    const base64Credentials = btoa(credentials); // Encode to Base64\r\n    return `Basic ${base64Credentials}`;\r\n};\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: 'http://localhost:8081/api', // Replace with your back-end URL\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        // Generate the Basic Authentication header using the utility function\r\n        'Authorization': getBasicAuthHeader(username, password),\r\n    },\r\n});\r\n\r\n// Function to get all tenants\r\nexport const getTenants = async () => {\r\n    try {\r\n        const response = await apiClient.get('/tenants');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching tenants', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Function to create a new tenant\r\nexport const createTenant = async (tenant) => {\r\n    try {\r\n        const response = await apiClient.post('/tenants', tenant);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error creating tenant', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Function to update a tenant\r\nexport const updateTenant = async (id, tenant) => {\r\n    try {\r\n        const response = await apiClient.put(`/tenants/${id}`, tenant);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error updating tenant', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Function to get tenant by ID\r\nexport const getTenantById = async (id) => {\r\n    try {\r\n        const response = await apiClient.get(`/tenants/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching tenant by ID', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Function to delete a tenant\r\nexport const deleteTenant = async (id) => {\r\n    try {\r\n        await apiClient.delete(`/tenants/${id}`);\r\n    } catch (error) {\r\n        console.error('Error deleting tenant', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Similarly, add functions for rent payments\r\nexport const getRentPayments = async () => {\r\n    try {\r\n        const response = await apiClient.get('/rentpayments');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching rent payments', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// ... Other rent payment methods\r\n// Function to create a new rentpayments\r\nexport const createRentpayments = async (rentpayments) => {\r\n    try {\r\n        const response = await apiClient.post('/rentpayments', rentpayments);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error creating rent payments', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Function to update a rent payments\r\nexport const updateRentpayments = async (id, rentpayments) => {\r\n    try {\r\n        const response = await apiClient.put(`/rentpayments/${id}`, { ...rentpayments, id });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error updating rent payments', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Function to get rentpayments by ID\r\nexport const getRentpaymentsById = async (id) => {\r\n    try {\r\n        const response = await apiClient.get(`/rentpayments/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching rentpayments by ID', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Function to delete a rentpayments\r\nexport const deleteRentpayments = async (id) => {\r\n    try {\r\n        await apiClient.delete(`/rentpayments/${id}`);\r\n    } catch (error) {\r\n        console.error('Error deleting rentpayments', error);\r\n        throw error;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}